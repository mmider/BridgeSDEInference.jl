using ForwardDiff: value

"""
    AbstractObsScheme

Types inheriting from abstract type `AbstractObsScheme` define the scheme
according to which a stochastic process has been observed
"""
abstract type AbstractObsScheme end


"""
    PartObs <: AbstractObsScheme

Type acting as a flag for partially observed diffusions
"""
struct PartObs <: AbstractObsScheme end


"""
    FPT <: AbstractObsScheme

Observation scheme in which only first passage times are observed
"""
struct FPT <: AbstractObsScheme end

"""
    ParamUpdateType

Types inheriting from abstract type `ParamUpdateType` define the way in which
parameters are to be updated by the MCMC sampler
"""
abstract type ParamUpdateType end

"""
    ConjugateUpdt <: ParamUpdateType

Type acting as a flag for update from full conditional (conjugate to a prior)
"""
struct ConjugateUpdt <: ParamUpdateType end

"""
    MetropolisHastingsUpdt <: ParamUpdateType

Flag for performing update according to Metropolis Hastings step
"""
struct MetropolisHastingsUpdt <: ParamUpdateType end

"""
    MixedEffectsMHUpdt <: ParamUpdateType

Flag for performing update according to Metropolis Hastings step
for a mixed effect parameter.
"""
struct MixedEffectsMHUpdt <: ParamUpdateType end


"""
    setBlocking(ùîÖ::NoBlocking, ::Any, ::Any, ::Any, ::Any)

No blocking is to be done, do nothing
"""
setBlocking(ùîÖ::NoBlocking, ::Any, ::Any, ::Any, ::Any) = ùîÖ


"""
    setBlocking(::ChequeredBlocking, blockingParams, P, WW, XX)

Blocking pattern is chosen to be a chequerboard.
"""
function setBlocking(::ChequeredBlocking, blockingParams, P, WW, XX)
    ChequeredBlocking(blockingParams..., P, WW, XX)
end

"""
    FPTInfo{S,T}

The struct
```
struct FPTInfo{S,T}
    condCoord::NTuple{N,S}
    upCrossing::NTuple{N,Bool}
    autoRenewed::NTuple{N,Bool}
    reset::NTuple{N,T}
end
```
serves as a container for the information regarding first passage time
observations. `condCoord` is an NTuple of coordinates that are conditioned on
the first passage time nature of the observations. `upCrossing` indicates
whether observations of the corresponding coordinate are up-crossings or
down-crossings. `autoRenewed` indicates whether process starts from the
renewed state (i.e. normally the process is unconstrained until it hits level
`reset` for the first time, however `autoRenewed` process is constrained on the
first passage time from the very beginnig). `reset` level is the level that
needs to be reached before the process starts to be conditioned on the first
passage time.
"""
struct FPTInfo{S,T,N}
    condCoord::NTuple{N,S}
    upCrossing::NTuple{N,Bool}
    autoRenewed::NTuple{N,Bool}
    reset::NTuple{N,T}

    FPTInfo(condCoord::NTuple{N,S}, upCrossing::NTuple{N,Bool},
            reset::NTuple{N,T},
            autoRenewed::NTuple{N,Bool} = Tuple(fill(false,length(condCoord)))
            ) where {S,T,N} = new{S,T,N}(condCoord, upCrossing,
                                         autoRenewed, reset)
end


"""
    checkSingleCoordFpt(XX·µí, c, cidx, fpt)

Verify whether coordinate `c` (with index number `cidx`) of path `XX·µí`.yy
adheres to the first passage time observation scheme specified by the object
`fpt`.
"""
function checkSingleCoordFpt(XX·µí, c, cidx, fpt)
    k = length(XX·µí.yy)
    thrsd = XX·µí.yy[end][c]
    renewed = fpt.autoRenewed[cidx]
    s = fpt.upCrossing[cidx] ? 1 : -1
    for i in 1:k
        if !renewed && (s*XX·µí.yy[i][c] <= s*fpt.reset[cidx])
            renewed = true
        elseif renewed && (s*XX·µí.yy[i][c] > s*thrsd)
            return false
        end
    end
    return renewed
end


"""
    checkFpt(::PartObs, XX·µí, fpt)

First passage time constrains are automatically satisfied for the partially
observed scheme
"""
checkFpt(::PartObs, XX·µí, fpt) = true


"""
    checkFpt(::FPT, XX·µí, fpt)

Verify whether path `XX·µí`.yy adheres to the first passage time observation
scheme specified by the object `fpt`.
"""
function checkFpt(::FPT, XX·µí, fpt)
    for (cidx, c) in enumerate(fpt.condCoord)
        if !checkSingleCoordFpt(XX·µí, c, cidx, fpt)
            return false
        end
    end
    return true
end


"""
    checkFullPathFpt(::PartObs, ::Any, ::Any, ::Any)

First passage time constrains are automatically satisfied for the partially
observed scheme
"""
checkFullPathFpt(::PartObs, ::Any, ::Any, ::Any) = true


"""
    checkFullPathFpt(::PartObs, XX·µí, m, fpt)

Verify whether all paths in the range `iRange`, i.e. `XX·µí`[i].yy, i in `iRange`
adhere to the first passage time observation scheme specified by the object
`fpt`
"""
function checkFullPathFpt(::FPT, XX·µí, iRange, fpt)
    for i in iRange
        if !checkFpt(FPT(), XX·µí[i], fpt[i])
            return false
        end
    end
    return true
end

"""
    findProposalLaw(xx, tt, PÀü, PÃÉ, Ls, Œ£s; dt=1/5000, timeChange=true,
                    solver::ST=Ralston3())

Initialise the object with proposal law and all the necessary containers needed
for the simulation of the guided proposals
"""
function findProposalLaw(::Type{K}, xx, tt, PÀü, PÃÉ, Ls, Œ£s, œÑ; dt=1/5000,
                         solver::ST=Ralston3(),
                         changePt::ODEChangePt=NoChangePt()) where {K,ST}
    m = length(xx) - 1
    P = Array{ContinuousTimeProcess,1}(undef,m)
    for i in m:-1:1
        numPts = Int64(ceil((tt[i+1]-tt[i])/dt))+1
        t = œÑ(tt[i], tt[i+1]).( range(tt[i], stop=tt[i+1], length=numPts) )
        P[i] = ( (i==m) ? GuidPropBridge(K, t, PÀü, PÃÉ[i], Ls[i], xx[i+1], Œ£s[i];
                                         changePt=changePt, solver=ST()) :
                          GuidPropBridge(K, t, PÀü, PÃÉ[i], Ls[i], xx[i+1], Œ£s[i],
                                         P[i+1].H[1], P[i+1].HŒΩ[1], P[i+1].c[1];
                                         changePt=changePt, solver=ST()) )
    end
    P
end


"""
    initialise(::ObsScheme, P, m, y::StartingPtPrior{T}, ::S, fpt)

Initialise the workspace for MCMC algorithm. Initialises containers for driving
Wiener processes `WW·µí` & `WW`, for diffusion processes `XX·µí` & `XX`, for
diffusion Law `P·µí` (parametrised by proposal parameters) and defines the type
of Wiener process `Wnr`.
"""
function initialise(::ObsScheme, P, m, yPr::StartingPtPrior{T}, ::S,
                    fpt) where {ObsScheme <: AbstractObsScheme,T,S}
    y = startPt(yPr)
    P·µí = deepcopy(P)
    TW = typeof(sample([0], Wiener{S}()))
    TX = typeof(SamplePath([], zeros(T, 0)))
    XX·µí = Vector{TX}(undef,m)
    WW·µí = Vector{TW}(undef,m)
    Wnr = Wiener{S}()
    for i in 1:m
        WW·µí[i] = Bridge.samplepath(P[i].tt, zero(S))
        sample!(WW·µí[i], Wnr)
        XX·µí[i] = solve(Euler(), y, WW·µí[i], P[i])
        while !checkFpt(ObsScheme(), XX·µí[i], fpt[i])
            sample!(WW·µí[i], Wnr)
            solve!(Euler(), XX·µí[i], y, WW·µí[i], P[i])
        end
        y = XX·µí[i].yy[end]
    end
    y = startPt(yPr)
    ll = logpdf(yPr, y)
    ll += pathLogLikhd(ObsScheme(), XX·µí, P, 1:m, fpt, skipFPT=true)
    ll += lobslikelihood(P[1], y)

    XX = deepcopy(XX·µí)
    WW = deepcopy(WW·µí)
    # needed for proper initialisation of the Crank-Nicolson scheme
    yPr = invStartPt(y, yPr, P[1])

    Wnr, WW·µí, WW, XX·µí, XX, P·µí, ll, yPr
end


"""
    savePath!(Paths, XX, saveMe, skip)

If `saveMe` flag is true, then save the entire path spanning all segments in
`XX`. Only 1 in  every `skip` points is saved to reduce storage space.
"""
function savePath!(Paths, XX, saveMe, skip)
    if saveMe
        push!(Paths, collect(Iterators.flatten(XX[i].yy[1:skip:end-1]
                                               for i in 1:length(XX))))
    end
end


"""
    acceptSample(logThreshold, verbose=false)

Make a random MCMC decision for whether to accept a sample or reject it.
"""
function acceptSample(logThreshold, verbose=false)
    if rand(Exponential(1.0)) > -logThreshold # Reject if NaN
        verbose && print("\t ‚úì\n")
        return true
    else
        verbose && print("\t .\n")
        return false
    end
end


"""
    solveBackRec!(P, solver::ST=Ralston3()) where ST

Solve backward recursion to find H, HŒΩ, c and Q, which together define rÃÉ(t,x)
and pÃÉ(x, ùìì) under the auxiliary law, when no blocking is done
"""
function solveBackRec!(::NoBlocking, P, solver::ST=Ralston3()) where ST
    m = length(P)
    gpupdate!(P[m]; solver=ST())
    for i in (m-1):-1:1
        gpupdate!(P[i], P[i+1].H[1], P[i+1].HŒΩ[1], P[i+1].c[1]; solver=ST())
    end
end


"""
    solveBackRec!(P, solver::ST=Ralston3()) where ST

Solve backward recursion to find H, HŒΩ, c and Q, which together define rÃÉ(t,x)
and pÃÉ(x, ùìì) under the auxiliary law, when blocking is done
"""
function solveBackRec!(ùîÖ::BlockingSchedule, P, solver::ST=Ralston3()) where ST
    for block in reverse(ùîÖ.blocks[ùîÖ.idx])
        gpupdate!(P[block[end]]; solver=ST())
        for i in reverse(block[1:end-1])
            gpupdate!(P[i], P[i+1].H[1], P[i+1].HŒΩ[1], P[i+1].c[1]; solver=ST())
        end
    end
end

"""
    proposalStartPt(::BlockingSchedule, ::Val{1}, ::Any, yPr, P, œÅ)

Set a new starting point for the proposal path when sampling the first block in
a blocking scheme.

...
# Arguments
- `::BlockingSchedule`: indicator that a blocking scheme is used
- `::Val{1}`: indicator that it's the first block, so starting point needs updating
- `yPr`: prior over the starting point
- `P`: diffusion law
- `œÅ`: memory parameter in the Crank-Nicolson scheme
...
"""
function proposalStartPt(::BlockingSchedule, ::Val{1}, ::Any, yPr, P, œÅ)
    proposalStartPt(NoBlocking(), nothing, nothing, yPr, P, œÅ)
end

"""
    proposalStartPt(::BlockingSchedule, ::Any, y‚ÇÄ, yPr, ::Any, ::Any)

Default behaviour of dealing with a starting point in the blocking scheme is
to do nothing
"""
function proposalStartPt(::BlockingSchedule, ::Any, y‚ÇÄ, yPr, ::Any, ::Any)
    y‚ÇÄ, yPr
end

"""
    proposalStartPt(::NoBlocking, ::Any, y‚ÇÄ, yPr, P, œÅ)

Set a new starting point for the proposal path when no blocking is done
...
# Arguments
- `::NoBlocking`: indicator that no blocking is done
- `yPr`: prior over the starting point
- `P`: diffusion law
- `œÅ`: memory parameter in the Crank-Nicolson scheme
...
"""
function proposalStartPt(::NoBlocking, ::Any, ::Any, yPr, P, œÅ)
    yPr·µí = rand(yPr, œÅ)
    y = startPt(yPr·µí, P)
    y, yPr·µí
end

"""
    printInfo(verbose::Bool, it::Integer, ll, ll·µí, msg="update")

Print information to the console about current likelihood values

...
# Arguments
- `verbose`: flag for whether to print anything at all
- `it`: iteration of the Markov chain
- `ll`: likelihood of the previous, accepted sample
- `ll·µí`: likelihood of the proposal sample
- `msg`: message to start with
...
"""
function printInfo(verbose::Bool, it::Integer, ll, ll·µí, msg="update")
    verbose && print(msg, ": ", it, " ll ", round(ll, digits=3), " ",
                     round(ll·µí, digits=3), " diff_ll: ", round(ll·µí-ll,digits=3))
end


"""
    pathLogLikhd(::ObsScheme, XX, P, iRange, fpt; skipFPT=false)

Compute likelihood for path `XX` to be observed under `P`. Only segments with
index numbers in `iRange` are considered. `fpt` contains relevant info about
checks regarding adherence to first passage time pattern. `skipFPT` if set to
`true` can skip the step of checking adherence to fpt pattern (used for
conjugate updates, or any updates that keep `XX` unchanged)
"""
function pathLogLikhd(::ObsScheme, XX, P, iRange, fpt; skipFPT=false
                      ) where ObsScheme <: AbstractObsScheme
    ll = 0.0
    for i in iRange
        ll += llikelihood(LeftRule(), XX[i], P[i])
    end
    !skipFPT && (ll = checkFullPathFpt(ObsScheme(), XX, iRange, fpt) ? ll : -Inf)
    ll
end

"""
    swap!(A, A·µí, iRange)

Swap contents between containers A & A·µí in the index range iRange
"""
function swap!(A, A·µí, iRange)
    for i in iRange
        A[i], A·µí[i] = A·µí[i], A[i]
    end
end

"""
    swap!(A, A·µí, B, B·µí, iRange)

Swap contents between containers A & A·µí in the index range iRange, do the same
for containers B & B·µí
"""
function swap!(A, A·µí, B, B·µí, iRange)
    swap!(A, A·µí, iRange)
    swap!(B, B·µí, iRange)
end

"""
    crankNicolson!(y·µí, y, œÅ)

Preconditioned Crank Nicolson update with memory parameter `œÅ`, previous vector
`y` and new vector `y·µí`
"""
crankNicolson!(y·µí, y, œÅ) = (y·µí .= ‚àö(1-œÅ)*y·µí + ‚àö(œÅ)*y)


"""
    sampleSegment!(i, Wnr, WW, WW·µí, P, y, XX, œÅ)

Sample `i`th path segment using preconditioned Crank-Nicolson scheme
...
# Arguments
- `i`: index of the segment to be sampled
- `Wnr`: type of the Wiener process
- `WW`: containers with old Wiener paths
- `WW·µí`: containers where proposal Wiener paths will be stored
- `P`: laws of the diffusion to be sampled
- `y`: starting point of the segment
- `XX`: containers for proposal diffusion path
- `œÅ`: memory parameter for the Crank-Nicolson scheme
...
"""
function sampleSegment!(i, Wnr, WW, WW·µí, P, y, XX, œÅ)
    sample!(WW·µí[i], Wnr)
    crankNicolson!(WW·µí[i].yy, WW[i].yy, œÅ)
    solve!(Euler(), XX[i], y, WW·µí[i], P[i])
    XX[i].yy[end]
end


"""
    sampleSegments!(iRange, Wnr, WW, WW·µí, P, y, XX, œÅ)

Sample paths segments in index range `iRange` using preconditioned
Crank-Nicolson scheme
...
# Arguments
- `iRange`: range of indices of the segments that need to be sampled
- `Wnr`: type of the Wiener process
- `WW`: containers with old Wiener paths
- `WW·µí`: containers where proposal Wiener paths will be stored
- `P`: laws of the diffusion to be sampled
- `y`: starting point of the segment
- `XX`: containers for proposal diffusion path
- `œÅ`: memory parameter for the Crank-Nicolson scheme
...
"""
function sampleSegments!(iRange, Wnr, WW, WW·µí, P, y, XX, œÅ)
    for i in iRange
        y = sampleSegment!(i, Wnr, WW, WW·µí, P, y, XX, œÅ)
    end
end


"""
    impute!(::ObsScheme, ùîÖ::NoBlocking, Wnr, yPr, WW·µí, WW, XX·µí, XX, P, ll, fpt;
            œÅ=0.0, verbose=false, it=NaN, headStart=false) where
            ObsScheme <: AbstractObsScheme -> acceptedLogLikhd, acceptDecision

Imputation step of the MCMC scheme (without blocking).
...
# Arguments
- `::ObsScheme`: observation scheme---first-passage time or partial observations
- `Wnr`: type of the Wiener process
- `yPr`: prior over the starting point of the diffusion path
- `WW·µí`: containers for proposal Wiener paths
- `WW`: containers with old Wiener paths
- `XX·µí`: containers for proposal diffusion paths
- `XX`: containers with old diffusion paths
- `P`: laws of the diffusion path (proposal and target)
- `ll`: log-likelihood of the old (previously accepted) diffusion path
- `fpt`: info about first-passage time conditioning
- `œÅ`: memory parameter for the Crank-Nicolson scheme
- `verbose`: whether to print updates info while sampling
- `it`: iteration index of the MCMC algorithm
- `headStart`: flag for whether to 'ease into' fpt conditions
...
"""
function impute!(::ObsScheme, ùîÖ::NoBlocking, Wnr, yPr, WW·µí, WW, XX·µí, XX, P, ll,
                 fpt; œÅ=0.0, verbose=false, it=NaN, headStart=false,
                 solver::ST=Ralston3()) where
                 {ObsScheme <: AbstractObsScheme, ST}
    # sample proposal starting point
    y·µí, yPr·µí = proposalStartPt(ùîÖ, nothing, nothing, yPr, P[1], œÅ)

    # sample proposal path
    m = length(WW·µí)
    y·µó·µâ·µê·µñ = copy(y·µí)
    for i in 1:m
        sampleSegment!(i, Wnr, WW, WW·µí, P, y·µó·µâ·µê·µñ, XX·µí, œÅ)
        if headStart
            while !checkFpt(ObsScheme(), XX·µí[i], fpt[i])
                sampleSegment!(i, Wnr, WW, WW·µí, P, y·µó·µâ·µê·µñ, XX·µí, œÅ)
            end
        end
        y·µó·µâ·µê·µñ = XX·µí[i].yy[end]
    end

    ll·µí = logpdf(yPr·µí, y·µí)
    ll·µí += pathLogLikhd(ObsScheme(), XX·µí, P, 1:m, fpt)
    ll·µí += lobslikelihood(P[1], y·µí)

    printInfo(verbose, it, value(ll), value(ll·µí), "impute")

    if acceptSample(ll·µí-ll, verbose)
        swap!(XX, XX·µí, WW, WW·µí, 1:m)
        return ll·µí, true, ùîÖ, yPr·µí
    else
        return ll, false, ùîÖ, yPr
    end
end


#NOTE deprecated
"""
    swapXX!(ùîÖ::ChequeredBlocking, XX)

Swap containers between `XX` and `ùîÖ.XX`
"""
function swapXX!(ùîÖ::BlockingSchedule, XX)
    for block in ùîÖ.blocks[ùîÖ.idx]
        swap!(XX, ùîÖ.XX, block)
    end
end

#NOTE deprecated
"""
    swapXX!(ùîÖ::NoBlocking, XX)

nothing to do
"""
swapXX!(ùîÖ::NoBlocking, XX) = nothing


"""
    noiseFromPath!(ùîÖ::BlockingSchedule, XX, WW, P)

Compute driving Wiener noise `WW` from path `XX` drawn under law `P`
"""
function noiseFromPath!(ùîÖ::BlockingSchedule, XX, WW, P)
    for block in ùîÖ.blocks[ùîÖ.idx]
        for i in block
            invSolve!(Euler(), XX[i], WW[i], P[i])
        end
    end
end


"""
    startPtLogPdf(::Val{1}, yPr::StartingPtPrior, y)

Compute the log-likelihood contribution of the starting point for a given prior
under a blocking scheme (intended to be used with a first block only)
"""
startPtLogPdf(::Val{1}, yPr::StartingPtPrior, y) = logpdf(yPr, y)

"""
    startPtLogPdf(::Any, yPr::StartingPtPrior, y)

Default contribution to log-likelihood from the startin point under blocking
"""
startPtLogPdf(::Any, yPr::StartingPtPrior, y) = 0.0


#NOTE deprecated
"""
    impute!(::ObsScheme, ùîÖ::ChequeredBlocking, Wnr, y, WW·µí, WW, XX·µí, XX, P, ll,
            fpt; œÅ=0.0, verbose=false, it=NaN, headStart=false) where
            ObsScheme <: AbstractObsScheme -> acceptedLogLikhd, acceptDecision

Imputation step of the MCMC scheme (without blocking).
...
# Arguments
- `::ObsScheme`: observation scheme---first-passage time or partial observations
- `ùîÖ`: object with relevant information about blocking
- `Wnr`: type of the Wiener process
- `yPr`: prior over the starting point of the diffusion path
- `WW·µí`: containers for proposal Wiener paths
- `WW`: containers with old Wiener paths
- `XX·µí`: containers for proposal diffusion paths
- `XX`: containers with old diffusion paths
- `P`: laws of the diffusion path (proposal and target)
- `ll`: log-likelihood of the old (previously accepted) diffusion path
- `fpt`: info about first-passage time conditioning
- `œÅ`: memory parameter for the Crank-Nicolson scheme
- `verbose`: whether to print updates info while sampling
- `it`: iteration index of the MCMC algorithm
- `headStart`: flag for whether to 'ease into' fpt conditions
...
"""
function impute!_deprecated(::ObsScheme, ùîÖ::ChequeredBlocking, Wnr, yPr, WW·µí, WW, XX·µí, XX,
                 P, ll, fpt; œÅ=0.0, verbose=false, it=NaN, headStart=false,
                 solver::ST=Ralston3()) where
                 {ObsScheme <: AbstractObsScheme, ST}
    Œ∏ = params(P[1].Target)             # current parameter
    ùîÖ = next(ùîÖ, XX, Œ∏)
    solveBackRec!(ùîÖ, ùîÖ.P, ST())         # compute (H, HŒΩ, c) for given blocks

    swapXX!(ùîÖ, XX)                      # move current path to object ùîÖ
    noiseFromPath!(ùîÖ, ùîÖ.XX, ùîÖ.WW, ùîÖ.P) # find noise WW that generates XX under ùîÖ

    # compute white noise generating starting point under ùîÖ
    yPrùîÖ = invStartPt(ùîÖ.XX[1].yy[1], yPr, ùîÖ.P[1])

    for (blockIdx, block) in enumerate(ùîÖ.blocks[ùîÖ.idx])
        blockFlag = Val{block[1]}()
        y = ùîÖ.XX[block[1]].yy[1]       # current starting point

        # set the starting point for the block
        y·µí, yPr·µí = proposalStartPt(ùîÖ, blockFlag, y, yPrùîÖ, ùîÖ.P[block[1]], œÅ)

        # sample path in block
        sampleSegments!(block, Wnr, ùîÖ.WW, ùîÖ.WW·µí, ùîÖ.P, y·µí, ùîÖ.XX·µí, œÅ)
        setEndPtManually!(ùîÖ, blockIdx, block)

        # loglikelihoods
        ll·µí = startPtLogPdf(blockFlag, yPr·µí, y·µí)
        ll·µí += pathLogLikhd(ObsScheme(), ùîÖ.XX·µí, ùîÖ.P, block, fpt)
        ll·µí += lobslikelihood(ùîÖ.P[block[1]], y·µí)

        llPrev = startPtLogPdf(blockFlag, yPrùîÖ, y)
        llPrev += pathLogLikhd(ObsScheme(), ùîÖ.XX, ùîÖ.P, block, fpt; skipFPT=true)
        llPrev += lobslikelihood(ùîÖ.P[block[1]], y)

        printInfo(verbose, it, value(llPrev), value(ll·µí), "impute")
        if acceptSample(ll·µí-llPrev, verbose)
            swap!(ùîÖ.XX, ùîÖ.XX·µí, block)
            registerAccpt!(ùîÖ, blockIdx, true)
            yPrùîÖ = yPr·µí # can do something non-trivial only for the first block
        else
            registerAccpt!(ùîÖ, blockIdx, false)
        end
    end
    swapXX!(ùîÖ, XX) # move accepted path from object ùîÖ to general container XX
    noiseFromPath!(ùîÖ, XX, WW, P) # compute noise WW that generated XX under law P
    # compute white noise generating starting point under P
    y = XX[1].yy[1]
    yPr = invStartPt(y, yPrùîÖ, P[1])

    ll = logpdf(yPr, y) # starting point contribution
    ll += pathLogLikhd(ObsScheme(), XX, P, 1:length(P), fpt; skipFPT=true)
    ll += lobslikelihood(P[1], y)

    # acceptance indicator does not matter for sampling with blocking
    return ll, true, ùîÖ, yPr
end


"""
    impute!(::ObsScheme, ùîÖ::ChequeredBlocking, Wnr, y, WW·µí, WW, XX·µí, XX, P, ll,
            fpt; œÅ=0.0, verbose=false, it=NaN, headStart=false) where
            ObsScheme <: AbstractObsScheme -> acceptedLogLikhd, acceptDecision

Imputation step of the MCMC scheme (without blocking).
...
# Arguments
- `::ObsScheme`: observation scheme---first-passage time or partial observations
- `ùîÖ`: object with relevant information about blocking
- `Wnr`: type of the Wiener process
- `yPr`: prior over the starting point of the diffusion path
- `WW·µí`: containers for proposal Wiener paths
- `WW`: containers with old Wiener paths
- `XX·µí`: containers for proposal diffusion paths
- `XX`: containers with old diffusion paths
- `P`: laws of the diffusion path (proposal and target)
- `ll`: log-likelihood of the old (previously accepted) diffusion path
- `fpt`: info about first-passage time conditioning
- `œÅ`: memory parameter for the Crank-Nicolson scheme
- `verbose`: whether to print updates info while sampling
- `it`: iteration index of the MCMC algorithm
- `headStart`: flag for whether to 'ease into' fpt conditions
...
"""
function impute!(::ObsScheme, ùîÖ::ChequeredBlocking, Wnr, yPr, WW·µí, WW, XX·µí, XX,
                 P, ll, fpt; œÅ=0.0, verbose=false, it=NaN, headStart=false,
                 solver::ST=Ralston3()
                 ) where {ObsScheme <: AbstractObsScheme, ST}
    Œ∏ = params(ùîÖ.P[1].Target)             # current parameter
    ùîÖ = next(ùîÖ, ùîÖ.XX, Œ∏)
    solveBackRec!(ùîÖ, ùîÖ.P, ST())         # compute (H, HŒΩ, c) for given blocks
    noiseFromPath!(ùîÖ, ùîÖ.XX, ùîÖ.WW, ùîÖ.P) # find noise WW that generates XX under ùîÖ.P

    # compute white noise generating starting point under ùîÖ
    yPr = invStartPt(ùîÖ.XX[1].yy[1], yPr, ùîÖ.P[1])

    ll_total = 0.0
    for (blockIdx, block) in enumerate(ùîÖ.blocks[ùîÖ.idx])
        blockFlag = Val{block[1]}()
        y = ùîÖ.XX[block[1]].yy[1]       # accepted starting point

        # proposal starting point for the block (can be non-y only for the first block)
        y·µí, yPr·µí = proposalStartPt(ùîÖ, blockFlag, y, yPr, ùîÖ.P[block[1]], œÅ)

        # sample path in block
        sampleSegments!(block, Wnr, ùîÖ.WW, ùîÖ.WW·µí, ùîÖ.P , y·µí, ùîÖ.XX·µí, œÅ)
        setEndPtManually!(ùîÖ, blockIdx, block)

        # starting point, path and observations contribution
        ll·µí = startPtLogPdf(blockFlag, yPr·µí, y·µí)
        ll·µí += pathLogLikhd(ObsScheme(), ùîÖ.XX·µí, ùîÖ.P, block, fpt)
        ll·µí += lobslikelihood(ùîÖ.P[block[1]], y·µí)

        llPrev = startPtLogPdf(blockFlag, yPr, y)
        llPrev += pathLogLikhd(ObsScheme(), ùîÖ.XX, ùîÖ.P, block, fpt; skipFPT=true)
        llPrev += lobslikelihood(ùîÖ.P[block[1]], y)

        printInfo(verbose, it, value(llPrev), value(ll·µí), "impute")
        if acceptSample(ll·µí-llPrev, verbose)
            swap!(ùîÖ.XX, ùîÖ.XX·µí, block)
            registerAccpt!(ùîÖ, blockIdx, true)
            yPr = yPr·µí # can do something non-trivial only for the first block
            ll_total += ll·µí
        else
            registerAccpt!(ùîÖ, blockIdx, false)
            ll_total += llPrev
        end
    end
    # acceptance indicator does not matter for sampling with blocking
    return ll_total, true, ùîÖ, yPr
end

"""
    updateLaws!(Ps, Œ∏·µí)

Set new parameter `Œ∏·µí` for the laws in vector `Ps`
"""
function updateLaws!(Ps, Œ∏·µí)
    m = length(Ps)
    for i in 1:m
        Ps[i] = GuidPropBridge(Ps[i], Œ∏·µí)
    end
end

"""
    updateTargetLaws!(ùîÖ::NoBlocking, Œ∏·µí)

Nothing to do
"""
updateTargetLaws!(ùîÖ::NoBlocking, Œ∏·µí) = nothing

"""
    updateTargetLaws!(ùîÖ::BlockingSchedule, Œ∏·µí)

Set new parameter `Œ∏·µí` for the target laws in blocking object `ùîÖ`
"""
function updateTargetLaws!(ùîÖ::BlockingSchedule, Œ∏·µí)
    for block in ùîÖ.blocks[ùîÖ.idx]
        for i in block
            ùîÖ.P[i] = GuidPropBridge(ùîÖ.P[i], Œ∏·µí)
        end
    end
end

"""
    updateProposalLaws!(ùîÖ::BlockingSchedule, Œ∏·µí)

Set new parameter `Œ∏·µí` for the proposal laws inside blocking object `ùîÖ`
"""
function updateProposalLaws!(ùîÖ::BlockingSchedule, Œ∏·µí)
    for block in ùîÖ.blocks[ùîÖ.idx]
        for i in block
            ùîÖ.P·µí[i] = GuidPropBridge(ùîÖ.P·µí[i], Œ∏·µí)
        end
    end
end

"""
    findPathFromWiener!(XX, y, WW, P, iRange)

Find path `XX` (that starts from `y`) that is generated under law `P` from the
Wiener process `WW`. Only segments with indices in range `iRange` are considered
"""
function findPathFromWiener!(XX, y, WW, P, iRange)
    for i in iRange
        solve!(Euler(), XX[i], y, WW[i], P[i])
        y = XX[i].yy[end]
    end
end


"""
    priorKernelContrib(tKern, priors, Œ∏, Œ∏·µí)

Contribution to the log-likelihood ratio from transition kernel `tKernel` and
`priors`.
"""
function priorKernelContrib(tKern, priors, Œ∏, Œ∏·µí)
    llr = logpdf(tKern, Œ∏·µí, Œ∏) - logpdf(tKern, Œ∏, Œ∏·µí)
    for prior in priors
        llr += logpdf(prior, Œ∏·µí) - logpdf(prior, Œ∏)
    end
    llr
end


"""
    setEndPtManually!(ùîÖ::BlockingSchedule, blockIdx, block)

Manually set the end-point of the proposal path under blocking so that it agrees
with the end-point of the previously accepted path. If it is the last block,
then do nothing
"""
function setEndPtManually!(ùîÖ::BlockingSchedule, blockIdx, block)
    if blockIdx < length(ùîÖ.blocks[ùîÖ.idx])
        ùîÖ.XX·µí[block[end]].yy[end] = ùîÖ.XX[block[end]].yy[end]
    end
end


"""
    updateParam!(::ObsScheme, ::MetropolisHastingsUpdt, tKern, Œ∏, ::UpdtIdx,
                 yPr, WW, P·µí, P, XX·µí, XX, ll, prior, fpt, recomputeODEs;
                 solver::ST=Ralston3(), verbose=false,
                 it=NaN) where {ObsScheme <: AbstractObsScheme, ST, UpdtIdx}
                 -> acceptedLogLikhd, acceptDecision
Update parameters
...
# Arguments
- `::ObsScheme`: observation scheme---first-passage time or partial observations
- `::MetropolisHastingsUpdt()`: type of the parameter update
- `tKern`: transition kernel
- `Œ∏`: current value of the parameter
- `updtIdx`: object declaring indices of the updated parameter
- `yPr`: prior over the starting point of the diffusion path
- `WW`: containers with Wiener paths
- `P·µí`: container for the laws of the diffusion path with new parametrisation
- `P`: laws of the diffusion path with old parametrisation
- `XX·µí`: containers for proposal diffusion paths
- `XX`: containers with old diffusion paths
- `ll`: likelihood of the old (previously accepted) parametrisation
- `priors`: list of priors
- `fpt`: info about first-passage time conditioning
- `recomputeODEs`: whether auxiliary law depends on the updated params
- `verbose`: whether to print updates info while sampling
- `it`: iteration index of the MCMC algorithm
...
"""
function updateParam!(::ObsScheme, ::MetropolisHastingsUpdt, ùîÖ::NoBlocking,
                      tKern, Œ∏, ::UpdtIdx, yPr, WW, P·µí, P, XX·µí, XX, ll, priors,
                      fpt, recomputeODEs; solver::ST=Ralston3(), verbose=false,
                      it=NaN) where {ObsScheme <: AbstractObsScheme, ST, UpdtIdx}
    m = length(WW)
    Œ∏·µí = rand(tKern, Œ∏, UpdtIdx())               # sample new parameter
    updateLaws!(P·µí, Œ∏·µí)
    recomputeODEs && solveBackRec!(NoBlocking(), P·µí, ST()) # compute (H, HŒΩ, c)

    # find white noise which for a given Œ∏·µí gives a correct starting point
    y = XX[1].yy[1]
    yPr·µí = invStartPt(y, yPr, P·µí[1])

    findPathFromWiener!(XX·µí, y, WW, P·µí, 1:m)

    ll·µí = logpdf(yPr·µí, y)
    ll·µí += pathLogLikhd(ObsScheme(), XX·µí, P·µí, 1:m, fpt)
    ll·µí += lobslikelihood(P·µí[1], y)

    printInfo(verbose, it, ll, ll·µí)

    llr = ( ll·µí - ll + priorKernelContrib(tKern, priors, Œ∏, Œ∏·µí))

    # Accept / reject
    if acceptSample(llr, verbose)
        swap!(XX, XX·µí, P, P·µí, 1:m)
        return ll·µí, true, Œ∏·µí, yPr·µí
    else
        return ll, false, Œ∏, yPr
    end
end


"""
    updateParam!(::ObsScheme, ::MetropolisHastingsUpdt, tKern, Œ∏, ::UpdtIdx,
                 yPr, WW, P·µí, P, XX·µí, XX, ll, prior, fpt, recomputeODEs;
                 solver::ST=Ralston3(), verbose=false,
                 it=NaN) where {ObsScheme <: AbstractObsScheme, ST, UpdtIdx}
                 -> acceptedLogLikhd, acceptDecision
Update parameters
...
# Arguments
- `::ObsScheme`: observation scheme---first-passage time or partial observations
- `::MetropolisHastingsUpdt()`: type of the parameter update
- `tKern`: transition kernel
- `Œ∏`: current value of the parameter
- `updtIdx`: object declaring indices of the updated parameter
- `yPr`: prior over the starting point of the diffusion path
- `WW`: containers with Wiener paths
- `P·µí`: container for the laws of the diffusion path with new parametrisation
- `P`: laws of the diffusion path with old parametrisation
- `XX·µí`: containers for proposal diffusion paths
- `XX`: containers with old diffusion paths
- `ll`: likelihood of the old (previously accepted) parametrisation
- `priors`: list of priors
- `fpt`: info about first-passage time conditioning
- `recomputeODEs`: whether auxiliary law depends on the updated params
- `verbose`: whether to print updates info while sampling
- `it`: iteration index of the MCMC algorithm
...
"""
function updateParam!(::ObsScheme, ::MetropolisHastingsUpdt,
                      ùîÖ::ChequeredBlocking, tKern, Œ∏, ::UpdtIdx,
                      yPr, WW, P·µí, P, XX·µí, XX, ll, priors, fpt, recomputeODEs;
                      solver::ST=Ralston3(), verbose=false,
                      it=NaN) where {ObsScheme <: AbstractObsScheme, ST, UpdtIdx}
    m = length(WW)
    Œ∏·µí = rand(tKern, Œ∏, UpdtIdx())               # sample new parameter
    updateProposalLaws!(ùîÖ, Œ∏·µí)                   # update law `P·µí` accordingly
    solveBackRec!(ùîÖ, ùîÖ.P·µí, ST())                 # compute (H, HŒΩ, c)

    ll·µí = logpdf(yPr, ùîÖ.XX[1].yy[1])
    for (blockIdx, block) in enumerate(ùîÖ.blocks[ùîÖ.idx])
        y = ùîÖ.XX[block[1]].yy[1]
        findPathFromWiener!(ùîÖ.XX·µí, y, ùîÖ.WW, ùîÖ.P·µí, block)
        setEndPtManually!(ùîÖ, blockIdx, block)

        # Compute log-likelihood ratio
        ll·µí += pathLogLikhd(ObsScheme(), ùîÖ.XX·µí, ùîÖ.P·µí, block, fpt)
        ll·µí += lobslikelihood(ùîÖ.P·µí[block[1]], y)
    end
    printInfo(verbose, it, ll, ll·µí)

    llr = ( ll·µí - ll + priorKernelContrib(tKern, priors, Œ∏, Œ∏·µí))

    # Accept / reject
    if acceptSample(llr, verbose)
        swap!(ùîÖ.XX, ùîÖ.XX·µí, ùîÖ.P, ùîÖ.P·µí, 1:m)
        return ll·µí, true, Œ∏·µí, yPr
    else
        return ll, false, Œ∏, yPr
    end
end


fetchTargetLaw(ùîÖ::NoBlocking, P) = P[1].Target

fetchTargetLaw(ùîÖ::BlockingSchedule, P) = ùîÖ.P[1].Target


"""
    updateParam!(::PartObs, ::ConjugateUpdt, tKern, Œ∏, ::UpdtIdx, yPr, WW, P·µí,
                 P, XX·µí, XX, ll, priors, fpt, recomputeODEs;
                 solver::ST=Ralston3(), verbose=false, it=NaN
                 ) -> acceptedLogLikhd, acceptDecision
Update parameters
see the definition of  updateParam!(‚Ä¶, ::MetropolisHastingsUpdt, ‚Ä¶) for the
explanation of the arguments.
"""
function updateParam!(::ObsScheme, ::ConjugateUpdt, ùîÖ::NoBlocking,
                      tKern, Œ∏, ::UpdtIdx, yPr, WW, P·µí, P, XX·µí, XX, ll, priors,
                      fpt, recomputeODEs; solver::ST=Ralston3(), verbose=false,
                      it=NaN) where {ObsScheme <: AbstractObsScheme, ST, UpdtIdx}
    m = length(P)
    œë = conjugateDraw(Œ∏, XX, P[1].Target, priors[1], UpdtIdx())   # sample new parameter
    Œ∏·µí = moveToProperPlace(œë, Œ∏, UpdtIdx())     # align so that dimensions agree

    updateLaws!(P, Œ∏·µí)
    recomputeODEs && solveBackRec!(NoBlocking(), P, ST()) # compute (H, HŒΩ, c)

    for i in 1:m    # compute wiener path WW that generates XX
        invSolve!(Euler(), XX[i], WW[i], P[i])
    end
    # compute white noise that generates starting point
    y = XX[1].yy[1]
    yPr = invStartPt(y, yPr, P[1])

    ll·µí = logpdf(yPr, y)
    ll·µí += pathLogLikhd(ObsScheme(), XX, P, 1:m, fpt; skipFPT=true)
    ll·µí += lobslikelihood(P[1], y)
    printInfo(verbose, it, value(ll), value(ll·µí))
    return ll·µí, true, Œ∏·µí, yPr
end


"""
    updateParam!(::PartObs, ::ConjugateUpdt, tKern, Œ∏, ::UpdtIdx, yPr, WW, P·µí,
                 P, XX·µí, XX, ll, priors, fpt, recomputeODEs;
                 solver::ST=Ralston3(), verbose=false, it=NaN
                 ) -> acceptedLogLikhd, acceptDecision
Update parameters
see the definition of  updateParam!(‚Ä¶, ::MetropolisHastingsUpdt, ‚Ä¶) for the
explanation of the arguments.
"""
function updateParam!(::ObsScheme, ::ConjugateUpdt, ùîÖ::BlockingSchedule,
                      tKern, Œ∏, ::UpdtIdx, yPr, WW, P·µí, P, XX·µí, XX, ll, priors,
                      fpt, recomputeODEs; solver::ST=Ralston3(), verbose=false,
                      it=NaN) where {ObsScheme <: AbstractObsScheme, ST, UpdtIdx}
    m = length(P)
    œë = conjugateDraw(Œ∏, ùîÖ.XX, ùîÖ.P[1].Target, priors[1], UpdtIdx())   # sample new parameter
    Œ∏·µí = moveToProperPlace(œë, Œ∏, UpdtIdx())     # align so that dimensions agree

    updateTargetLaws!(ùîÖ, Œ∏·µí)
    recomputeODEs && solveBackRec!(ùîÖ, ùîÖ.P, ST())
    for i in 1:m    # compute wiener path WW that generates XX
        invSolve!(Euler(), ùîÖ.XX[i], ùîÖ.WW[i], ùîÖ.P[i])
    end
    # compute white noise that generates starting point
    y = ùîÖ.XX[1].yy[1]
    yPr = invStartPt(y, yPr, ùîÖ.P[1])
    ll·µí = logpdf(yPr, y)
    for block in ùîÖ.blocks[ùîÖ.idx]
        ll·µí += pathLogLikhd(ObsScheme(), ùîÖ.XX, ùîÖ.P, block, fpt; skipFPT=true)
        ll·µí += lobslikelihood(ùîÖ.P[block[1]], ùîÖ.XX[block[1]].yy[1])
    end
    printInfo(verbose, it, value(ll), value(ll·µí))
    return ll·µí, true, Œ∏·µí, yPr
end


"""
    mcmc(::ObsScheme, obs, obsTimes, yPr::StartingPtPrior, w, PÀü, PÃÉ, Ls, Œ£s,
         numSteps, tKernel, priors; fpt=fill(NaN, length(obsTimes)-1), œÅ=0.0,
         dt=1/5000, timeChange=true, saveIter=NaN, verbIter=NaN,
         updtCoord=(Val((true,)),), paramUpdt=true, skipForSave=1,
         updtType=(MetropolisHastingsUpdt(),), solver::ST=Ralston3(), warmUp=0)

Gibbs sampler alternately imputing unobserved parts of the path and updating
unknown coordinates of the parameter vector (the latter only if paramUpdt==true)
...
# Arguments
- `::ObsScheme`: observation scheme---first-passage time or partial observations
- `obs`: vector with observations
- `obsTimes`: times of the observations
- `yPr`: prior over the starting point of the diffusion path
- `w`: dummy variable whose type must agree with the type of the Wiener process
- `PÀü`: law of the target diffusion (with initial Œ∏‚ÇÄ set)
- `PÃÉ`: law of the auxiliary process (with initial Œ∏‚ÇÄ set)
- `Ls`: vector of observation operators (one per each observation)
- `Œ£s`: vector of covariance matrices of the noise (one per each observaiton)
- `numSteps`: number of mcmc iterations
- `tKernel`: transition kernel (also with initial Œ∏‚ÇÄ set)
- `priors`: a list of lists of priors
- `œÑ`: time-change transformation
- `fpt`: info about first-passage time conditioning
- `œÅ`: memory parameter for the Crank-Nicolson scheme
- `dt`: time-distance for the path imputation
- `saveIter`: save path `XX` once every `saveIter` many iterations
- `verbIter`: print out progress info once every `verbIter` many iterations
- `updtCoord`: list of objects declaring indices of to-be-updated parameters
- `paramUpdt`: flag for whether to update parameters at all
- `skipForSave`: when saving paths, save only one in every `skipForSave` points
- `updtType`: list of types of updates to cycle through
- `solver`: numerical solver used for computing backward ODEs
- `warmUp`: number of steps for which no parameter update is to be made
...
"""
function mcmc(::Type{K}, ::ObsScheme, obs, obsTimes, yPr::StartingPtPrior, w,
              PÀü, PÃÉ, Ls, Œ£s, numSteps, tKernel, priors, œÑ;
              fpt=fill(NaN, length(obsTimes)-1), œÅ=0.0, dt=1/5000, saveIter=NaN,
              verbIter=NaN, updtCoord=(Val((true,)),), paramUpdt=true,
              skipForSave=1, updtType=(MetropolisHastingsUpdt(),),
              blocking::Blocking=NoBlocking(),
              blockingParams=([], 0.1, NoChangePt()),
              solver::ST=Ralston3(), changePt::CP=NoChangePt(), warmUp=0
              ) where {K, ObsScheme <: AbstractObsScheme, ST, Blocking, CP}
    P = findProposalLaw( K, obs, obsTimes, PÀü, PÃÉ, Ls, Œ£s, œÑ; dt=dt, solver=ST(),
                         changePt=CP(getChangePt(blockingParams[3])) )
    m = length(obs)-1
    updtLen = length(updtCoord)
    Wnr, WW·µí, WW, XX·µí, XX, P·µí, ll, yPr = initialise(ObsScheme(), P, m, yPr, w,
                                                    fpt)
    Paths = []
    accImpCounter = 0
    accUpdtCounter = [0 for i in 1:updtLen]
    Œ∏ = params(PÀü)
    Œ∏chain = Vector{typeof(Œ∏)}(undef, (numSteps-warmUp)*updtLen+1)
    Œ∏chain[1] = copy(Œ∏)
    recomputeODEs = [any([e in dependsOnParams(P[1].Pt) for e
                         in idx(uc)]) for uc in updtCoord]

    updtStepCounter = 1
    ùîÖ = setBlocking(blocking, blockingParams, P, WW, XX)
    display(ùîÖ)
    for i in 1:numSteps
        verbose = (i % verbIter == 0)
        i > warmUp && savePath!(Paths, blocking == NoBlocking() ? XX : ùîÖ.XX,
                                (i % saveIter == 0), skipForSave)
        ll, acc, ùîÖ, yPr = impute!(ObsScheme(), ùîÖ, Wnr, yPr, WW·µí, WW, XX·µí, XX,
                                  P, ll, fpt, œÅ=œÅ, verbose=verbose, it=i,
                                  solver=ST())
        accImpCounter += 1*acc
        if paramUpdt && i > warmUp
            for j in 1:updtLen
                (ll, acc, Œ∏,
                 yPr) = updateParam!(ObsScheme(), updtType[j], ùîÖ, tKernel, Œ∏,
                                     updtCoord[j], yPr, WW, P·µí, P, XX·µí, XX, ll,
                                     priors[j], fpt, recomputeODEs[j];
                                     solver=ST(), verbose=verbose, it=i)
                accUpdtCounter[j] += 1*acc
                updtStepCounter += 1
                Œ∏chain[updtStepCounter] = copy(Œ∏)
                verbose && print("\n")
            end
            verbose && print("------------------------------------------------",
                             "------\n")
        end
    end
    displayAcceptanceRate(ùîÖ)
    Time = collect(Iterators.flatten(p.tt[1:skipForSave:end-1] for p in P))
    Œ∏chain, accImpCounter/numSteps, accUpdtCounter./numSteps, Paths, Time
end
